server:
  port: ${PORT:8080}

spring:
  # H2 Database for easy ngrok demo (no external dependencies)
  datasource:
    url: jdbc:h2:mem:libsys;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        format_sql: false

  # Embedded Kafka for ngrok demo (no external Kafka needed)
  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: 1
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: ${KAFKA_GROUP_ID:libsys-ngrok-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true
      properties:
        spring.json.trusted.packages: "com.d_tech.libsys.dto"
        spring.json.use.type.headers: false

# Application configuration
app:
  kafka:
    enabled: ${KAFKA_ENABLED:true}
    topic:
      user-registration: user-registration-topic
      stock-control: stock-control-topic
      stock-order: stock-order-topic
      invoice: invoice-topic

# JWT Configuration
jwt:
  secret: mySecretKey123456789012345678901234567890123456789012345678901234567890
  expiration: 86400000

# Logging - Optimized for ngrok demo
logging:
  level:
    root: INFO
    com.d_tech.libsys: INFO
    org.springframework.kafka: WARN
    org.apache.kafka: ERROR
    org.hibernate: WARN
    org.springframework.security: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Management endpoints - Full monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,beans,kafka
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
  health:
    kafka:
      enabled: true
  info:
    env:
      enabled: true

# CORS Configuration for ngrok
cors:
  allowed-origins:
    - "https://*.ngrok-free.app"
    - "https://*.ngrok.io"
    - "http://localhost:*"
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers: "*"
  allow-credentials: true

# Application info
info:
  app:
    name: LibSys Library Management System
    description: Full Featured Library Management - Ngrok Ready
    version: 1.0.0
    features:
      - JWT Authentication
      - Book Management
      - Stock Control with Kafka
      - Order Management
      - Invoice Generation
      - Event Tracking
      - Admin Dashboard
    demo-mode: true
    ngrok-ready: true