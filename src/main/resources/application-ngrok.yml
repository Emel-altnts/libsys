server:
  port: ${PORT:8080}
  servlet:
    context-path: /
  tomcat:
    max-threads: 200
    max-connections: 8192
    connection-timeout: 20000
    threads:
      max: 200
      min-spare: 10

spring:
  # ✅ H2 Database - Ngrok Ready (No External Dependencies)
  datasource:
    url: jdbc:h2:mem:libsys_ngrok;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE
    driver-class-name: org.h2.Driver
    username: libsys
    password: libsys123
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
        trace: false

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    show-sql: false
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect
        jdbc:
          time_zone: UTC

  # ✅ KAFKA CONFIGURATION - Optional for ngrok
  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: 1
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
        delivery.timeout.ms: 30000
        request.timeout.ms: 15000
        retry.backoff.ms: 1000
    consumer:
      group-id: ${KAFKA_GROUP_ID:libsys-ngrok-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true
      properties:
        spring.json.trusted.packages: "com.d_tech.libsys.dto"
        spring.json.use.type.headers: false
        session.timeout.ms: 15000
        heartbeat.interval.ms: 5000
        max.poll.records: 500
        max.poll.interval.ms: 300000

  # ✅ JACKSON Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
      write-durations-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null
    time-zone: UTC

# ✅ APPLICATION CONFIGURATION
app:
  kafka:
    enabled: ${KAFKA_ENABLED:false}  # Ngrok için varsayılan false
    topic:
      user-registration: user-registration-topic
      stock-control: stock-control-topic
      stock-order: stock-order-topic
      invoice: invoice-topic

  demo:
    enabled: true
    load-sample-data: true

  ngrok:
    ready: true
    cors-enabled: true

# ✅ JWT CONFIGURATION
jwt:
  secret: ${JWT_SECRET:NgrokLibSysSecretKey123456789012345678901234567890NgrokDemoSecureKey}
  expiration: 86400000  # 24 hours

# ✅ LOGGING CONFIGURATION
logging:
  level:
    root: INFO
    com.d_tech.libsys: INFO
    org.springframework.security: INFO
    org.springframework.kafka: WARN
    org.apache.kafka: ERROR
    org.hibernate: WARN
    org.springframework.web: INFO
    org.springframework.boot.web.embedded.tomcat: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/libsys-ngrok.log
    max-size: 10MB
    max-history: 5

# ✅ MANAGEMENT ENDPOINTS - Full Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,beans,loggers,threaddump,heapdump,openapi,swagger-ui
      base-path: /actuator
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST,PUT,DELETE,OPTIONS
        allowed-headers: "*"
        allow-credentials: true
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
    loggers:
      enabled: true
    metrics:
      enabled: true
  health:
    kafka:
      enabled: ${app.kafka.enabled:false}
    diskspace:
      enabled: true
    db:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
    git:
      enabled: true
      mode: full

# ✅ SPRINGDOC OPENAPI CONFIGURATION
springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: true
  show-actuator: true

# ✅ APPLICATION INFO - Ngrok Ready
info:
  app:
    name: "LibSys Library Management System"
    description: "Full Featured Library Management - Ngrok Ready API"
    version: "1.0.0"
    contact:
      name: "D-Tech Development"
      email: "support@d-tech.com"
      url: "https://github.com/d-tech/libsys"
    license:
      name: "MIT"
      url: "https://opensource.org/licenses/MIT"

    # ✅ FEATURES LIST
    features:
      authentication: "JWT Authentication"
      books: "Book Management with Images"
      stock: "Stock Control System"
      orders: "Order Management"
      invoices: "Invoice Generation"
      events: "Event Tracking"
      admin: "Admin Dashboard"
      monitoring: "Real-time Monitoring"
      api-docs: "OpenAPI Documentation"

    # ✅ DEMO CREDENTIALS
    demo-credentials:
      admin: "admin/admin (ADMIN role)"
      test: "test/123456 (USER role)"
      frontend: "frontend/frontend123 (USER role)"
      manager: "manager/manager123 (ADMIN role)"

    # ✅ API ENDPOINTS
    api-endpoints:
      swagger: "/swagger-ui.html"
      api-docs: "/api-docs"
      h2-console: "/h2-console"
      actuator: "/actuator"
      health: "/actuator/health"

    # ✅ STATUS FLAGS
    ngrok-ready: true
    cors-enabled: true
    kafka-enabled: ${app.kafka.enabled:false}
    database: "H2 In-Memory"
    demo-mode: true

# ✅ SECURITY CONFIGURATION
security:
  cors:
    allowed-origins:
      - "https://*.ngrok-free.app"
      - "https://*.ngrok.io"
      - "https://*.ngrok.com"
      - "https://*.ngrok.app"
      - "http://localhost:*"
      - "https://localhost:*"
      - "http://127.0.0.1:*"
      - "https://127.0.0.1:*"
    allowed-methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
      - PATCH
      - HEAD
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

# ✅ CUSTOM PROPERTIES
application:
  security:
    cors:
      enabled: true
      debug: true
  demo:
    data-loader:
      enabled: true
      create-sample-data: true
    mode: true
  ngrok:
    ready: true
    features:
      all: true
    cors:
      enabled: true
    monitoring:
      enabled: true