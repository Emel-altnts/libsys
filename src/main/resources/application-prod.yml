server:
  port: ${PORT:9090}

spring:
  # ðŸš€ RAILWAY: PostgreSQL VeritabanÄ± YapÄ±landÄ±rmasÄ±
  datasource:
    url: ${DATABASE_URL}
    username: ${PGUSER}
    password: ${PGPASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  # ðŸš€ JPA/Hibernate YapÄ±landÄ±rmasÄ± - Production optimized
  jpa:
    open-in-view: true  # Railway'de lazy loading iÃ§in aÃ§Ä±k
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false  # Production'da kapalÄ±
    properties:
      hibernate:
        # Railway iÃ§in lazy loading ayarlarÄ±
        enable_lazy_load_no_trans: true  # Railway'de gerekli

        # Connection management
        connection:
          provider_disables_autocommit: false

        # Batch processing - Railway iÃ§in optimize
        jdbc:
          batch_size: 10  # Railway iÃ§in kÃ¼Ã§Ã¼k batch
          fetch_size: 25  # Railway iÃ§in kÃ¼Ã§Ã¼k fetch
        order_inserts: true
        order_updates: true

        # Caching - Railway iÃ§in hafif
        cache:
          use_second_level_cache: false  # Railway'de memory tasarrufu
          use_query_cache: false

        # ID generation
        id:
          new_generator_mappings: true

  # ðŸš€ KAFKA: CloudKarafka veya Railway Kafka
  kafka:
    # CloudKarafka iÃ§in SSL/SASL
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: 1
      retries: 3
      retry-backoff-ms: 1000
      request-timeout-ms: 30000
      properties:
        enable.idempotence: false
        # ðŸš€ CloudKarafka SSL ayarlarÄ±
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
        sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}
        # SSL configuration for CloudKarafka
        ssl.endpoint.identification.algorithm: ""
        ssl.truststore.type: JKS
        ssl.check.hostname: false

    consumer:
      group-id: ${KAFKA_GROUP_ID:libsys-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: true
      auto-commit-interval: 5000
      session-timeout-ms: 30000
      heartbeat-interval-ms: 10000
      properties:
        spring.json.trusted.packages: "com.d_tech.libsys.dto"
        spring.json.use.type.headers: false
        spring.json.value.default.type: "com.d_tech.libsys.dto.StockOrderEvent"
        # ðŸš€ CloudKarafka SSL ayarlarÄ±
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
        sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}
        # SSL configuration for CloudKarafka
        ssl.endpoint.identification.algorithm: ""
        ssl.truststore.type: JKS
        ssl.check.hostname: false
      listener:
        ack-mode: record
        concurrency: 1
        poll-timeout: 3000
        missing-topics-fatal: false

# ðŸš€ RAILWAY: Topic yapÄ±landÄ±rmasÄ±
app:
  kafka:
    enabled: ${APP_KAFKA_ENABLED:true}
    topic:
      # CloudKarafka iÃ§in prefix desteÄŸi
      user-registration: ${KAFKA_TOPIC_USER_REGISTRATION:${KAFKA_TOPIC_PREFIX:}user-registration-topic}
      stock-control: ${KAFKA_TOPIC_STOCK_CONTROL:${KAFKA_TOPIC_PREFIX:}stock-control-topic}
      stock-order: ${KAFKA_TOPIC_STOCK_ORDER:${KAFKA_TOPIC_PREFIX:}stock-order-topic}
      invoice: ${KAFKA_TOPIC_INVOICE:${KAFKA_TOPIC_PREFIX:}invoice-topic}

  # Transaction yÃ¶netimi - Railway iÃ§in hafif
  transaction:
    timeout: 30
    isolation: READ_COMMITTED
    propagation: REQUIRED

  # JPA lazy loading - Railway iÃ§in
  jpa:
    lazy-loading:
      strategy: JOIN_FETCH
      batch-size: 5  # Railway iÃ§in kÃ¼Ã§Ã¼k
      enable-no-trans-workaround: true

# ðŸš€ RAILWAY: Production Logging
logging:
  level:
    root: INFO
    com.d_tech.libsys: INFO

    # Database logging - minimal
    org.hibernate.SQL: WARN
    org.hibernate.type: WARN
    org.springframework.transaction: WARN
    org.springframework.orm.jpa: WARN

    # Kafka logging - important only
    org.springframework.kafka: INFO
    org.apache.kafka: WARN

    # Connection pool
    com.zaxxer.hikari: WARN

  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"

  # Railway disk space tasarrufu iÃ§in log dosyasÄ± yok
  file:
    name: /tmp/libsys.log  # Railway temp directory
    max-size: 50MB
    max-history: 2

# ðŸš€ RAILWAY: Management endpoints - gÃ¼venlik
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    info:
      enabled: true
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: false  # Railway'de gerekli deÄŸil
  info:
    app:
      name: LibSys Railway
      version: 1.0.0
      environment: production

# ðŸš€ RAILWAY: Debug ayarlarÄ± - minimal
debug:
  transaction:
    trace: false
  lazy-loading:
    trace: false
  repository:
    trace-queries: false
  performance:
    enable-timing: false
    log-slow-queries: true
    slow-query-threshold: 2000  # 2 seconds

---
# ðŸš€ RAILWAY: Kafka olmadan Ã§alÄ±ÅŸma profili
spring:
  config:
    activate:
      on-profile: prod-no-kafka

app:
  kafka:
    enabled: false

logging:
  level:
    com.d_tech.libsys.service.KafkaProducerService: OFF
    com.d_tech.libsys.service.UserRegistrationConsumer: OFF
    com.d_tech.libsys.service.StockOrderConsumer: OFF
    com.d_tech.libsys.service.StockControlConsumer: OFF
    com.d_tech.libsys.service.InvoiceConsumer: OFF