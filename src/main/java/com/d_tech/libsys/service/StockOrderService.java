package com.d_tech.libsys.service;

import com.d_tech.libsys.domain.model.*;
import com.d_tech.libsys.dto.*;
import com.d_tech.libsys.repository.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

/**
 * Stok sipari≈ü y√∂netim servisi - FIXED VERSION
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class StockOrderService {

    private final StockOrderRepository stockOrderRepository;
    private final StockOrderItemRepository stockOrderItemRepository;
    private final BookRepository bookRepository;
    private final BookStockRepository bookStockRepository;
    private final KafkaProducerService kafkaProducerService;
    private final EntityManager entityManager; // ‚úÖ EntityManager injection eklendi

    /**
     * Asenkron sipari≈ü olu≈üturma
     */
    public CompletableFuture<String> createOrderAsync(StockOrderRequest orderRequest) {
        log.info("Asenkron sipari≈ü olu≈üturma ba≈ülatƒ±lƒ±yor: supplier={}, itemCount={}",
                orderRequest.getSupplierName(), orderRequest.getItems().size());

        try {
            // Temel validasyonlar
            validateOrderRequest(orderRequest);

            // Event olu≈ütur
            StockOrderEvent event = StockOrderEvent.builder()
                    .eventId(generateEventId("CREATE_ORDER"))
                    .eventType(StockOrderEvent.EventType.CREATE_ORDER)
                    .orderRequest(orderRequest)
                    .build();

            // Kafka'ya g√∂nder
            return kafkaProducerService.sendStockOrderEvent(event)
                    .thenApply(success -> {
                        if (success) {
                            log.info("Sipari≈ü olu≈üturma event'i g√∂nderildi: eventId={}", event.getEventId());
                            return event.getEventId();
                        } else {
                            log.error("Sipari≈ü olu≈üturma event'i g√∂nderilemedi");
                            throw new RuntimeException("Sipari≈ü olu≈üturma event'i g√∂nderilemedi");
                        }
                    });

        } catch (Exception e) {
            log.error("Asenkron sipari≈ü olu≈üturma hatasƒ±: error={}", e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * Sipari≈ü onaylama
     */
    public CompletableFuture<String> confirmOrderAsync(Long orderId, String userId) {
        log.info("Sipari≈ü onaylama ba≈ülatƒ±lƒ±yor: orderId={}, userId={}", orderId, userId);

        try {
            StockOrderEvent event = StockOrderEvent.builder()
                    .eventId(generateEventId("CONFIRM_ORDER"))
                    .eventType(StockOrderEvent.EventType.CONFIRM_ORDER)
                    .orderId(orderId)
                    .build();

            return kafkaProducerService.sendStockOrderEvent(event)
                    .thenApply(success -> {
                        if (success) {
                            log.info("Sipari≈ü onaylama event'i g√∂nderildi: eventId={}", event.getEventId());
                            return event.getEventId();
                        } else {
                            throw new RuntimeException("Sipari≈ü onaylama event'i g√∂nderilemedi");
                        }
                    });

        } catch (Exception e) {
            log.error("Sipari≈ü onaylama hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * Sipari≈ü teslimat alma
     */
    public CompletableFuture<String> receiveOrderAsync(Long orderId, List<StockReceiptItem> receiptItems, String userId) {
        log.info("Sipari≈ü teslimat alma ba≈ülatƒ±lƒ±yor: orderId={}, userId={}", orderId, userId);

        try {
            StockOrderEvent event = StockOrderEvent.builder()
                    .eventId(generateEventId("RECEIVE_ORDER"))
                    .eventType(StockOrderEvent.EventType.RECEIVE_ORDER)
                    .orderId(orderId)
                    .message("Receipt items: " + receiptItems.size())
                    .build();

            return kafkaProducerService.sendStockOrderEvent(event)
                    .thenApply(success -> {
                        if (success) {
                            log.info("Sipari≈ü teslimat event'i g√∂nderildi: eventId={}", event.getEventId());
                            return event.getEventId();
                        } else {
                            throw new RuntimeException("Sipari≈ü teslimat event'i g√∂nderilemedi");
                        }
                    });

        } catch (Exception e) {
            log.error("Sipari≈ü teslimat hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * üöÄ FIXED: Sipari≈ü detayƒ±nƒ± getir - SIMPLIFIED AND ROBUST VERSION
     */
    @Transactional(readOnly = true)
    public Optional<StockOrder> getOrderById(Long orderId) {
        System.out.println("=== StockOrderService.getOrderById SIMPLIFIED VERSION ===");
        System.out.println("üîç Aranan ID: " + orderId);

        log.info("Sipari≈ü detayƒ± getiriliyor: orderId={}", orderId);

        try {
            // ‚úÖ Input validation
            if (orderId == null || orderId <= 0) {
                System.out.println("‚ùå Ge√ßersiz orderId: " + orderId);
                log.warn("Ge√ßersiz orderId: {}", orderId);
                return Optional.empty();
            }

            // ‚úÖ Simple approach - direct repository call
            System.out.println("üîç Repository.findById √ßaƒürƒ±lƒ±yor...");
            Optional<StockOrder> result = stockOrderRepository.findById(orderId);

            if (result.isPresent()) {
                StockOrder order = result.get();
                System.out.println("‚úÖ Sipari≈ü bulundu: ID=" + order.getId() + ", OrderNumber=" + order.getOrderNumber());
                log.info("Sipari≈ü bulundu: orderId={}, orderNumber={}", orderId, order.getOrderNumber());
                return result;
            } else {
                System.out.println("‚ùå Sipari≈ü bulunamadƒ± - alternatif y√∂ntemler deneniyor...");
                
                // Try with native query as fallback
                try {
                    StockOrder order = (StockOrder) entityManager.createNativeQuery(
                            "SELECT * FROM stock_orders WHERE id = ?", StockOrder.class)
                            .setParameter(1, orderId)
                            .getSingleResult();
                    
                    System.out.println("‚úÖ Native query ile bulundu: " + order.getOrderNumber());
                    return Optional.of(order);
                } catch (Exception nativeEx) {
                    System.out.println("‚ùå Native query ile de bulunamadƒ±");
                }
                
                // Final debug info
                printSimpleDebugInfo(orderId);
                return Optional.empty();
            }

        } catch (Exception e) {
            System.out.println("üí• getOrderById hatasƒ±: " + e.getMessage());
            log.error("Sipari≈ü detayƒ± getirme hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return Optional.empty();
        }
    }

    /**
     * ‚úÖ SIMPLIFIED DEBUG: Basit debug bilgisi
     */
    private void printSimpleDebugInfo(Long searchId) {
        try {
            System.out.println("=== SIMPLE DEBUG INFO ===");

            // Toplam sipari≈ü sayƒ±sƒ±
            long totalCount = stockOrderRepository.count();
            System.out.println("üìä Toplam sipari≈ü sayƒ±sƒ±: " + totalCount);

            if (totalCount > 0) {
                // ƒ∞lk 3 sipari≈ü ID'si
                List<Long> firstIds = stockOrderRepository.debugGetAllIds().stream().limit(3).toList();
                System.out.println("üìä ƒ∞lk 3 ID: " + firstIds);
                
                // Search ID var mƒ± kontrol
                List<Long> allIds = stockOrderRepository.debugGetAllIds();
                boolean exists = allIds.contains(searchId);
                System.out.println("üîç Search ID (" + searchId + ") exists: " + exists);
                
                if (!exists && !allIds.isEmpty()) {
                    System.out.println("üí° Suggestion: Mevcut ID'lerden birini deneyin: " + allIds.get(0));
                }
            } else {
                System.out.println("‚ö†Ô∏è Veritabanƒ±nda hi√ß sipari≈ü yok!");
            }

        } catch (Exception debugEx) {
            System.out.println("‚ö†Ô∏è Debug info hatasƒ±: " + debugEx.getMessage());
        }
    }

    /**
     * ‚úÖ Cache clearing ile sipari≈ü arama
     */
    @Transactional(readOnly = true)
    public Optional<StockOrder> getOrderByIdWithCacheClear(Long orderId) {
        System.out.println("=== Cache Clear Version ===");
        log.info("Cache clear ile sipari≈ü aranƒ±yor: orderId={}", orderId);

        try {
            // Cache'i temizle
            entityManager.clear();

            // Tekrar ara
            Optional<StockOrder> result = stockOrderRepository.findById(orderId);

            if (result.isPresent()) {
                System.out.println("‚úÖ Cache clear sonrasƒ± bulundu: " + result.get().getOrderNumber());
                return result;
            }

            // Native query ile tekrar dene
            Query nativeQuery = entityManager.createNativeQuery(
                    "SELECT * FROM stock_orders WHERE id = ?", StockOrder.class);
            nativeQuery.setParameter(1, orderId);

            try {
                StockOrder order = (StockOrder) nativeQuery.getSingleResult();
                result = Optional.of(order);
                System.out.println("‚úÖ Native query ile bulundu: " + order.getOrderNumber());
            } catch (NoResultException e) {
                System.out.println("‚ùå Native query ile de bulunamadƒ±");
            }

            return result;

        } catch (Exception e) {
            log.error("Cache clear version hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return Optional.empty();
        }
    }

    /**
     * ‚úÖ DEBUG: T√ºm sipari≈üleri getir (debug i√ßin)
     */
    @Transactional(readOnly = true)
    public List<StockOrder> getAllOrdersForDebug() {
        log.info("DEBUG: T√ºm sipari≈üler getiriliyor");

        try {
            List<StockOrder> allOrders = stockOrderRepository.findAll();
            log.info("DEBUG: Toplam {} sipari≈ü bulundu", allOrders.size());

            allOrders.forEach(order -> {
                log.info("DEBUG: Order - ID: {}, Number: {}, Supplier: {}, Status: {}",
                        order.getId(), order.getOrderNumber(), order.getSupplierName(), order.getStatus());
            });

            return allOrders;
        } catch (Exception e) {
            log.error("DEBUG: T√ºm sipari≈üler getirme hatasƒ±: {}", e.getMessage(), e);
            return List.of();
        }
    }

    /**
     * ‚úÖ DEBUG: Test sipari≈üi olu≈ütur (debug i√ßin)
     */
    @Transactional
    public StockOrder createTestOrderForDebug() {
        log.info("DEBUG: Test sipari≈üi olu≈üturuluyor");

        try {
            // Test sipari≈üi olu≈ütur
            StockOrder testOrder = StockOrder.builder()
                    .orderNumber("TEST-" + System.currentTimeMillis())
                    .supplierName("Test Supplier")
                    .supplierContact("test@supplier.com")
                    .expectedDeliveryDate(LocalDateTime.now().plusDays(7))
                    .notes("Test sipari≈üi - Debug ama√ßlƒ± olu≈üturuldu")
                    .createdBy("SYSTEM_DEBUG")
                    .status(StockOrder.OrderStatus.PENDING)
                    .totalAmount(BigDecimal.valueOf(100.00))
                    .totalVat(BigDecimal.valueOf(18.00))
                    .grandTotal(BigDecimal.valueOf(118.00))
                    .build();

            StockOrder savedOrder = stockOrderRepository.save(testOrder);
            log.info("DEBUG: Test sipari≈üi olu≈üturuldu - ID: {}, OrderNumber: {}", 
                    savedOrder.getId(), savedOrder.getOrderNumber());

            return savedOrder;
        } catch (Exception e) {
            log.error("DEBUG: Test sipari≈üi olu≈üturma hatasƒ±: {}", e.getMessage(), e);
            throw new RuntimeException("Test sipari≈üi olu≈üturulamadƒ±", e);
        }
    }

    /**
     * Senkron sipari≈ü olu≈üturma (Consumer tarafƒ±ndan √ßaƒürƒ±lƒ±r)
     */
    @Transactional
    public StockOrder createOrder(StockOrderRequest orderRequest) {
        log.info("Sipari≈ü olu≈üturuluyor: supplier={}", orderRequest.getSupplierName());

        // Sipari≈ü numarasƒ± olu≈ütur
        String orderNumber = generateOrderNumber();

        // Sipari≈ü olu≈ütur
        StockOrder order = StockOrder.builder()
                .orderNumber(orderNumber)
                .supplierName(orderRequest.getSupplierName())
                .supplierContact(orderRequest.getSupplierContact())
                .expectedDeliveryDate(orderRequest.getExpectedDeliveryDate())
                .notes(orderRequest.getNotes())
                .createdBy(orderRequest.getCreatedBy())
                .build();

        // Sipari≈ü kaydet
        StockOrder savedOrder = stockOrderRepository.save(order);

        // Sipari≈ü kalemlerini olu≈ütur
        for (StockOrderItemRequest itemRequest : orderRequest.getItems()) {
            StockOrderItem item = createOrderItem(savedOrder, itemRequest);
            stockOrderItemRepository.save(item);
        }

        // Tutarlarƒ± hesapla
        savedOrder.calculateTotals();
        stockOrderRepository.save(savedOrder);

        log.info("Sipari≈ü olu≈üturuldu: orderId={}, orderNumber={}, total={}",
                savedOrder.getId(), savedOrder.getOrderNumber(), savedOrder.getGrandTotal());

        return savedOrder;
    }

    /**
     * Sipari≈ü kalemi olu≈ütur
     */
    private StockOrderItem createOrderItem(StockOrder order, StockOrderItemRequest itemRequest) {
        // Kitap kontrol et
        Book book = bookRepository.findById(itemRequest.getBookId())
                .orElseThrow(() -> new IllegalArgumentException("Kitap bulunamadƒ±: " + itemRequest.getBookId()));

        return StockOrderItem.builder()
                .stockOrder(order)
                .book(book)
                .quantity(itemRequest.getQuantity())
                .unitPrice(itemRequest.getUnitPrice())
                .vatRate(itemRequest.getVatRate() != null ? itemRequest.getVatRate() : new BigDecimal("18.00"))
                .discountRate(itemRequest.getDiscountRate() != null ? itemRequest.getDiscountRate() : BigDecimal.ZERO)
                .notes(itemRequest.getNotes())
                .build();
    }

    /**
     * Sipari≈ü onaylama (Consumer tarafƒ±ndan √ßaƒürƒ±lƒ±r)
     */
    @Transactional
    public StockOrder confirmOrder(Long orderId) {
        log.info("Sipari≈ü onaylanƒ±yor: orderId={}", orderId);

        StockOrder order = stockOrderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Sipari≈ü bulunamadƒ±: " + orderId));

        if (!order.isCancellable()) {
            throw new IllegalStateException("Sipari≈ü onaylanamaz durumda: " + order.getStatus());
        }

        order.setStatus(StockOrder.OrderStatus.CONFIRMED);
        StockOrder savedOrder = stockOrderRepository.save(order);

        log.info("Sipari≈ü onaylandƒ±: orderId={}, status={}", orderId, savedOrder.getStatus());
        return savedOrder;
    }

    /**
     * Sipari≈ü teslimat alma (Consumer tarafƒ±ndan √ßaƒürƒ±lƒ±r)
     */
    @Transactional
    public StockOrder receiveOrder(Long orderId, List<StockReceiptItem> receiptItems) {
        log.info("Sipari≈ü teslimatƒ± alƒ±nƒ±yor: orderId={}, itemCount={}", orderId, receiptItems.size());

        StockOrder order = stockOrderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Sipari≈ü bulunamadƒ±: " + orderId));

        List<StockOrderItem> orderItems = stockOrderItemRepository.findByStockOrderId(orderId);
        boolean fullyReceived = true;

        // Her sipari≈ü kalemi i√ßin teslimat g√ºncelle
        for (StockReceiptItem receiptItem : receiptItems) {
            StockOrderItem orderItem = orderItems.stream()
                    .filter(item -> item.getId().equals(receiptItem.getOrderItemId()))
                    .findFirst()
                    .orElseThrow(() -> new IllegalArgumentException("Sipari≈ü kalemi bulunamadƒ±: " + receiptItem.getOrderItemId()));

            // Teslimat miktarƒ±nƒ± g√ºncelle
            orderItem.setReceivedQuantity(receiptItem.getReceivedQuantity());
            stockOrderItemRepository.save(orderItem);

            // Stoku g√ºncelle
            updateBookStockAfterReceipt(orderItem, receiptItem.getReceivedQuantity());

            // Tam teslimat kontrol√º
            if (!orderItem.isFullyReceived()) {
                fullyReceived = false;
            }
        }

        // Sipari≈ü durumunu g√ºncelle
        if (fullyReceived) {
            order.setStatus(StockOrder.OrderStatus.DELIVERED);
            order.setActualDeliveryDate(LocalDateTime.now());
        } else {
            order.setStatus(StockOrder.OrderStatus.PARTIAL_DELIVERY);
        }

        StockOrder savedOrder = stockOrderRepository.save(order);
        log.info("Sipari≈ü teslimatƒ± tamamlandƒ±: orderId={}, status={}", orderId, savedOrder.getStatus());

        return savedOrder;
    }

    /**
     * Teslimat sonrasƒ± stok g√ºncelleme
     */
    private void updateBookStockAfterReceipt(StockOrderItem orderItem, Integer receivedQuantity) {
        Optional<BookStock> stockOpt = bookStockRepository.findByBookId(orderItem.getBook().getId());

        if (stockOpt.isPresent()) {
            BookStock stock = stockOpt.get();
            stock.increaseStock(receivedQuantity);
            stock.setLastOrderDate(LocalDateTime.now());
            stock.setLastOrderQuantity(receivedQuantity);
            bookStockRepository.save(stock);

            log.info("Stok g√ºncellendi: bookId={}, oldQty={}, receivedQty={}, newQty={}",
                    orderItem.getBook().getId(),
                    stock.getCurrentQuantity() - receivedQuantity,
                    receivedQuantity,
                    stock.getCurrentQuantity());
        } else {
            log.warn("Stok kaydƒ± bulunamadƒ±: bookId={}", orderItem.getBook().getId());
        }
    }

    /**
     * Sipari≈üleri listele
     */
    @Transactional(readOnly = true)
    public List<StockOrder> getOrdersByStatus(StockOrder.OrderStatus status) {
        return stockOrderRepository.findByStatus(status);
    }

    /**
     * Bekleyen sipari≈üleri listele
     */
    @Transactional(readOnly = true)
    public List<StockOrder> getPendingOrders() {
        return stockOrderRepository.findPendingOrders();
    }

    /**
     * Tedarik√ßiye g√∂re sipari≈üleri listele
     */
    @Transactional(readOnly = true)
    public List<StockOrder> getOrdersBySupplier(String supplierName) {
        return stockOrderRepository.findBySupplierNameContainingIgnoreCase(supplierName);
    }

    /**
     * Sipari≈ü numarasƒ± ile getir
     */
    @Transactional(readOnly = true)
    public Optional<StockOrder> getOrderByNumber(String orderNumber) {
        return stockOrderRepository.findByOrderNumber(orderNumber);
    }

    /**
     * Vadesi ge√ßen sipari≈üleri listele
     */
    @Transactional(readOnly = true)
    public List<StockOrder> getOverdueOrders() {
        return stockOrderRepository.findOverdueOrders(LocalDateTime.now());
    }

    /**
     * Kullanƒ±cƒ±nƒ±n sipari≈ülerini listele
     */
    @Transactional(readOnly = true)
    public List<StockOrder> getOrdersByUser(String userId) {
        return stockOrderRepository.findByCreatedByOrderByOrderDateDesc(userId);
    }

    /**
     * Sipari≈ü iptal etme
     */
    @Transactional
    public StockOrder cancelOrder(Long orderId, String reason) {
        log.info("Sipari≈ü iptal ediliyor: orderId={}, reason={}", orderId, reason);

        StockOrder order = stockOrderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Sipari≈ü bulunamadƒ±: " + orderId));

        if (!order.isCancellable()) {
            throw new IllegalStateException("Sipari≈ü iptal edilemez durumda: " + order.getStatus());
        }

        order.setStatus(StockOrder.OrderStatus.CANCELLED);
        order.setNotes(order.getNotes() + " | ƒ∞ptal nedeni: " + reason);

        StockOrder cancelledOrder = stockOrderRepository.save(order);
        log.info("Sipari≈ü iptal edildi: orderId={}", orderId);

        return cancelledOrder;
    }

    /**
     * Sipari≈ü request validasyonu
     */
    private void validateOrderRequest(StockOrderRequest orderRequest) {
        if (orderRequest.getSupplierName() == null || orderRequest.getSupplierName().trim().isEmpty()) {
            throw new IllegalArgumentException("Tedarik√ßi adƒ± bo≈ü olamaz");
        }

        if (orderRequest.getItems() == null || orderRequest.getItems().isEmpty()) {
            throw new IllegalArgumentException("Sipari≈ü kalemleri bo≈ü olamaz");
        }

        for (StockOrderItemRequest item : orderRequest.getItems()) {
            if (item.getBookId() == null) {
                throw new IllegalArgumentException("Kitap ID'si bo≈ü olamaz");
            }
            if (item.getQuantity() == null || item.getQuantity() <= 0) {
                throw new IllegalArgumentException("Miktar pozitif olmalƒ±dƒ±r");
            }
            if (item.getUnitPrice() == null || item.getUnitPrice().compareTo(BigDecimal.ZERO) <= 0) {
                throw new IllegalArgumentException("Birim fiyat pozitif olmalƒ±dƒ±r");
            }
        }
    }

    /**
     * Sipari≈ü numarasƒ± olu≈üturucu
     */
    private String generateOrderNumber() {
        String orderNumber;
        do {
            orderNumber = "ORD-" + System.currentTimeMillis();
        } while (stockOrderRepository.existsByOrderNumber(orderNumber));

        return orderNumber;
    }

    /**
     * Event ID olu≈üturucu
     */
    private String generateEventId(String prefix) {
        return prefix + "_" + System.currentTimeMillis() + "_" + UUID.randomUUID().toString().substring(0, 8);
    }
}