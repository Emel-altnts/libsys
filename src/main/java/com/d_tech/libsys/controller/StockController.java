package com.d_tech.libsys.controller;

import com.d_tech.libsys.domain.model.BookStock;
import com.d_tech.libsys.repository.BookRepository; // ‚úÖ EKLENDƒ∞
import com.d_tech.libsys.service.StockService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Stok y√∂netim controller'ƒ±
 */
@RestController
@RequestMapping("/api/stock")
@RequiredArgsConstructor
@Slf4j
public class StockController {

    private final StockService stockService;
    private final BookRepository bookRepository; // ‚úÖ EKLENDƒ∞

    /**
     * Kitap i√ßin stok kaydƒ± olu≈ütur
     */
    @PostMapping("/create")
    public ResponseEntity<BookStock> createBookStock(
            @RequestBody CreateStockRequest request) {

        log.info("Stok kaydƒ± olu≈üturma isteƒüi: bookId={}, quantity={}",
                request.getBookId(), request.getInitialQuantity());

        try {
            BookStock stock = stockService.createBookStock(
                    request.getBookId(),
                    request.getInitialQuantity(),
                    request.getUnitPrice(),
                    request.getSupplierName(),
                    request.getSupplierContact()
            );

            return ResponseEntity.status(HttpStatus.CREATED).body(stock);

        } catch (Exception e) {
            log.error("Stok kaydƒ± olu≈üturma hatasƒ±: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Asenkron stok kontrol√º
     */
    @PostMapping("/check/{bookId}")
    public ResponseEntity<AsyncResponse> checkStockAsync(
            @PathVariable Long bookId,
            Authentication authentication) {

        String username = authentication != null ? authentication.getName() : "anonymous";
        log.info("Asenkron stok kontrol√º: bookId={}, user={}", bookId, username);

        try {
            CompletableFuture<String> future = stockService.checkStockAsync(bookId, username);
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Stok kontrol√º ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Stok kontrol√º hatasƒ±: bookId={}, error={}", bookId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Stok kontrol√º ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * Asenkron stok azaltma
     */
    @PostMapping("/decrease/{bookId}")
    public ResponseEntity<AsyncResponse> decreaseStockAsync(
            @PathVariable Long bookId,
            @RequestBody StockQuantityRequest request,
            Authentication authentication) {

        String username = authentication != null ? authentication.getName() : "anonymous";
        log.info("Asenkron stok azaltma: bookId={}, quantity={}, user={}",
                bookId, request.getQuantity(), username);

        try {
            CompletableFuture<String> future = stockService.decreaseStockAsync(
                    bookId, request.getQuantity(), username);
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Stok azaltma i≈ülemi ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Stok azaltma hatasƒ±: bookId={}, error={}", bookId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Stok azaltma i≈ülemi ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * Asenkron stok artƒ±rma
     */
    @PostMapping("/increase/{bookId}")
    public ResponseEntity<AsyncResponse> increaseStockAsync(
            @PathVariable Long bookId,
            @RequestBody StockQuantityRequest request,
            Authentication authentication) {

        String username = authentication != null ? authentication.getName() : "anonymous";
        log.info("Asenkron stok artƒ±rma: bookId={}, quantity={}, user={}",
                bookId, request.getQuantity(), username);

        try {
            CompletableFuture<String> future = stockService.increaseStockAsync(
                    bookId, request.getQuantity(), username);
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Stok artƒ±rma i≈ülemi ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Stok artƒ±rma hatasƒ±: bookId={}, error={}", bookId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Stok artƒ±rma i≈ülemi ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * Kitap stok bilgisini getir - DEBUG VERSION
     */
    @GetMapping("/{bookId}")
    public ResponseEntity<BookStock> getBookStock(@PathVariable Long bookId) {
        System.out.println("üîç Stok bilgisi istendi: bookId=" + bookId);

        try {
            Optional<BookStock> stock = stockService.getBookStock(bookId);

            if (stock.isPresent()) {
                BookStock bookStock = stock.get();
                System.out.println("‚úÖ Stok bilgisi bulundu: bookId=" + bookId +
                        ", quantity=" + bookStock.getCurrentQuantity() +
                        ", price=" + bookStock.getUnitPrice());
                return ResponseEntity.ok(bookStock);
            } else {
                System.out.println("‚ùå Stok bilgisi bulunamadƒ±: bookId=" + bookId);

                // Veritabanƒ±nda bu bookId i√ßin kayƒ±t var mƒ± kontrol et
                boolean bookExists = bookRepository.existsById(bookId);
                System.out.println("üìö Kitap var mƒ±: " + bookExists);

                if (!bookExists) {
                    System.out.println("‚ö†Ô∏è  Kitap ID'si mevcut deƒüil: " + bookId);
                }

                return ResponseEntity.notFound().build();
            }

        } catch (Exception e) {
            System.out.println("üí• Stok bilgisi getirilirken hata: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * D√º≈ü√ºk stoklu kitaplarƒ± listele
     */
    @GetMapping("/low-stock")
    public ResponseEntity<List<BookStock>> getLowStockBooks() {
        log.info("D√º≈ü√ºk stoklu kitaplar istendi");

        List<BookStock> lowStockBooks = stockService.getLowStockBooks();
        return ResponseEntity.ok(lowStockBooks);
    }

    /**
     * Yeniden stok gerekli kitaplarƒ± listele
     */
    @GetMapping("/restock-needed")
    public ResponseEntity<List<BookStock>> getBooksNeedingRestock() {
        log.info("Yeniden stok gerekli kitaplar istendi");

        List<BookStock> booksNeedingRestock = stockService.getBooksNeedingRestock();
        return ResponseEntity.ok(booksNeedingRestock);
    }

    /**
     * Stok durumuna g√∂re kitaplarƒ± listele
     */
    @GetMapping("/status/{status}")
    public ResponseEntity<List<BookStock>> getBooksByStockStatus(@PathVariable String status) {
        log.info("Stok durumuna g√∂re kitaplar istendi: status={}", status);

        try {
            BookStock.StockStatus stockStatus = BookStock.StockStatus.valueOf(status.toUpperCase());
            List<BookStock> books = stockService.getBooksByStockStatus(stockStatus);
            return ResponseEntity.ok(books);
        } catch (IllegalArgumentException e) {
            log.warn("Ge√ßersiz stok durumu: {}", status);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Tedarik√ßiye g√∂re stoklarƒ± listele
     */
    @GetMapping("/supplier/{supplierName}")
    public ResponseEntity<List<BookStock>> getStocksBySupplier(@PathVariable String supplierName) {
        log.info("Tedarik√ßiye g√∂re stoklar istendi: supplier={}", supplierName);

        List<BookStock> stocks = stockService.getStocksBySupplier(supplierName);
        return ResponseEntity.ok(stocks);
    }

    /**
     * Toplam stok deƒüerini hesapla
     */
    @GetMapping("/total-value")
    public ResponseEntity<Double> getTotalStockValue() {
        log.info("Toplam stok deƒüeri istendi");

        Double totalValue = stockService.getTotalStockValue();
        return ResponseEntity.ok(totalValue);
    }

    /**
     * Stok bilgilerini g√ºncelle
     */
    @PutMapping("/{stockId}")
    public ResponseEntity<BookStock> updateBookStock(
            @PathVariable Long stockId,
            @RequestBody UpdateStockRequest request) {

        log.info("Stok g√ºncelleme isteƒüi: stockId={}", stockId);

        try {
            BookStock updatedStock = stockService.updateBookStock(
                    stockId,
                    request.getMinimumQuantity(),
                    request.getMaximumQuantity(),
                    request.getUnitPrice(),
                    request.getSupplierName(),
                    request.getSupplierContact()
            );

            return ResponseEntity.ok(updatedStock);

        } catch (Exception e) {
            log.error("Stok g√ºncelleme hatasƒ±: stockId={}, error={}", stockId, e.getMessage(), e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * D√º≈ü√ºk stok uyarƒ±larƒ±nƒ± manuel tetikle
     */
    @PostMapping("/alert/low-stock")
    public ResponseEntity<String> triggerLowStockAlerts() {
        log.info("D√º≈ü√ºk stok uyarƒ±larƒ± manuel tetiklendi");

        try {
            stockService.sendLowStockAlerts();
            return ResponseEntity.ok("D√º≈ü√ºk stok uyarƒ±larƒ± g√∂nderildi");
        } catch (Exception e) {
            log.error("D√º≈ü√ºk stok uyarƒ±larƒ± g√∂nderme hatasƒ±: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body("Uyarƒ±lar g√∂nderilemedi: " + e.getMessage());
        }
    }

    // DTO sƒ±nƒ±flarƒ±
    @lombok.Data
    public static class CreateStockRequest {
        private Long bookId;
        private Integer initialQuantity;
        private BigDecimal unitPrice;
        private String supplierName;
        private String supplierContact;
    }

    @lombok.Data
    public static class StockQuantityRequest {
        private Integer quantity;
    }

    @lombok.Data
    public static class UpdateStockRequest {
        private Integer minimumQuantity;
        private Integer maximumQuantity;
        private BigDecimal unitPrice;
        private String supplierName;
        private String supplierContact;
    }

    @lombok.Data
    @lombok.AllArgsConstructor
    public static class AsyncResponse {
        private String message;
        private String eventId;
    }
}