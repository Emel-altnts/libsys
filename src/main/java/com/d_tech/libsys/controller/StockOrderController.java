package com.d_tech.libsys.controller;

import com.d_tech.libsys.domain.model.StockOrder;
import com.d_tech.libsys.dto.StockOrderRequest;
import com.d_tech.libsys.dto.StockReceiptItem;
import com.d_tech.libsys.service.StockOrderService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * üöÄ UPDATED: Stok sipari≈ü y√∂netim controller'ƒ± - SHIPPED endpoint ve JSON fix eklendi
 */
@RestController
@RequestMapping("/api/stock/orders")
@RequiredArgsConstructor
@Slf4j
public class StockOrderController {

    private final StockOrderService stockOrderService;

    /**
     * Asenkron sipari≈ü olu≈ütur
     */
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<AsyncResponse> createOrderAsync(
            @RequestBody StockOrderRequest orderRequest,
            Authentication authentication) {

        log.info("Asenkron sipari≈ü olu≈üturma isteƒüi: supplier={}, itemCount={}, user={}",
                orderRequest.getSupplierName(), orderRequest.getItems().size(), authentication.getName());

        // Olu≈üturan ki≈üiyi set et
        orderRequest.setCreatedBy(authentication.getName());

        try {
            CompletableFuture<String> future = stockOrderService.createOrderAsync(orderRequest);
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Sipari≈ü olu≈üturma i≈ülemi ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Sipari≈ü olu≈üturma hatasƒ±: error={}", e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Sipari≈ü olu≈üturma i≈ülemi ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * Sipari≈ü onaylama
     */
    @PostMapping("/{orderId}/confirm")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<AsyncResponse> confirmOrderAsync(
            @PathVariable Long orderId,
            Authentication authentication) {

        log.info("Sipari≈ü onaylama isteƒüi: orderId={}, user={}", orderId, authentication.getName());

        try {
            CompletableFuture<String> future = stockOrderService.confirmOrderAsync(orderId, authentication.getName());
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Sipari≈ü onaylama i≈ülemi ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Sipari≈ü onaylama hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Sipari≈ü onaylama i≈ülemi ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * üöÄ YENƒ∞: Sipari≈ü kargoya verme (CONFIRMED ‚Üí SHIPPED)
     */
    @PostMapping("/{orderId}/ship")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<AsyncResponse> shipOrderAsync(
            @PathVariable Long orderId,
            Authentication authentication) {

        log.info("Sipari≈ü kargoya verme isteƒüi: orderId={}, user={}", orderId, authentication.getName());

        try {
            CompletableFuture<String> future = stockOrderService.shipOrderAsync(orderId, authentication.getName());
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Sipari≈ü kargoya verme i≈ülemi ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Sipari≈ü kargoya verme hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Sipari≈ü kargoya verme i≈ülemi ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * üöÄ UPDATED: Sipari≈ü teslimat alma - JSON format d√ºzeltildi
     */
    @PostMapping("/{orderId}/receive")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<AsyncResponse> receiveOrderAsync(
            @PathVariable Long orderId,
            @RequestBody List<ReceiptItemRequest> receiptItems, // ‚úÖ Direkt List, wrapper yok
            Authentication authentication) {

        log.info("Sipari≈ü teslimat alma isteƒüi: orderId={}, itemCount={}, user={}",
                orderId, receiptItems.size(), authentication.getName());

        try {
            // ‚úÖ √ñnce sipari≈ü durumunu kontrol et
            Optional<StockOrder> orderOpt = stockOrderService.getOrderById(orderId);
            if (orderOpt.isEmpty()) {
                return ResponseEntity.notFound().build();
            }

            StockOrder order = orderOpt.get();
            // ‚úÖ CONFIRMED veya SHIPPED durumunda teslimat alƒ±nabilir
            if (order.getStatus() != StockOrder.OrderStatus.CONFIRMED &&
                    order.getStatus() != StockOrder.OrderStatus.SHIPPED) {
                return ResponseEntity.badRequest().body(new AsyncResponse(
                        "Sipari≈ü bu durumda teslimat alƒ±namaz: " + order.getStatus(), null));
            }

            // ReceiptItemRequest'i StockReceiptItem'a √ßevir
            List<StockReceiptItem> stockReceiptItems = receiptItems.stream()
                    .map(item -> StockReceiptItem.builder()
                            .orderItemId(item.getOrderItemId())
                            .receivedQuantity(item.getReceivedQuantity())
                            .notes(item.getNotes())
                            .build())
                    .toList();

            CompletableFuture<String> future = stockOrderService.receiveOrderAsync(
                    orderId, stockReceiptItems, authentication.getName());
            String eventId = future.get();

            return ResponseEntity.accepted().body(new AsyncResponse(
                    "Sipari≈ü teslimat alma i≈ülemi ba≈ülatƒ±ldƒ±", eventId
            ));

        } catch (Exception e) {
            log.error("Sipari≈ü teslimat alma hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(new AsyncResponse("Sipari≈ü teslimat alma i≈ülemi ba≈ülatƒ±lamadƒ±", null));
        }
    }

    /**
     * üöÄ YENƒ∞: Sipari≈ü kalemlerini getir (OrderItems debug i√ßin)
     */
    @GetMapping("/{orderId}/items")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<OrderItemDto>> getOrderItems(@PathVariable Long orderId) {
        log.info("Sipari≈ü kalemleri istendi: orderId={}", orderId);

        try {
            List<OrderItemDto> items = stockOrderService.getOrderItemsForDelivery(orderId);
            if (items.isEmpty()) {
                return ResponseEntity.notFound().build();
            }
            return ResponseEntity.ok(items);
        } catch (Exception e) {
            log.error("Sipari≈ü kalemleri getirme hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * üöÄ FIXED: Sipari≈ü detayƒ±nƒ± getir - Simplified JSON Response
     */
    @GetMapping("/{orderId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getOrder(@PathVariable Long orderId) {
        System.out.println("=== FIXED: Sipari≈ü detayƒ± istendi ===");
        System.out.println("üîç Aranan Order ID: " + orderId);

        log.info("Sipari≈ü detayƒ± istendi: orderId={}", orderId);

        try {
            Optional<StockOrder> orderOpt = stockOrderService.getOrderById(orderId);

            if (orderOpt.isPresent()) {
                StockOrder order = orderOpt.get();
                System.out.println("‚úÖ Sipari≈ü bulundu: ID=" + order.getId() + ", OrderNumber=" + order.getOrderNumber());

                // üöÄ CRITICAL FIX: Simplified DTO Response to avoid JSON serialization issues
                OrderResponseDto response = OrderResponseDto.builder()
                        .id(order.getId())
                        .orderNumber(order.getOrderNumber())
                        .supplierName(order.getSupplierName())
                        .supplierContact(order.getSupplierContact())
                        .orderDate(order.getOrderDate())
                        .expectedDeliveryDate(order.getExpectedDeliveryDate())
                        .actualDeliveryDate(order.getActualDeliveryDate())
                        .status(order.getStatus().toString())
                        .totalAmount(order.getTotalAmount())
                        .totalVat(order.getTotalVat())
                        .grandTotal(order.getGrandTotal())
                        .notes(order.getNotes())
                        .createdBy(order.getCreatedBy())
                        .createdAt(order.getCreatedAt())
                        .updatedAt(order.getUpdatedAt())
                        // Order items count (lazy loading issue √∂nleme)
                        .orderItemsCount(order.getOrderItems() != null ? order.getOrderItems().size() : 0)
                        .hasInvoice(order.getInvoice() != null)
                        .build();

                return ResponseEntity.ok(response);

            } else {
                System.out.println("‚ùå Sipari≈ü bulunamadƒ±: orderId=" + orderId);

                // DEBUG: Mevcut sipari≈üleri listele
                try {
                    List<StockOrder> allOrders = stockOrderService.getAllOrdersForDebug();
                    System.out.println("üìä Mevcut sipari≈ü sayƒ±sƒ±: " + allOrders.size());
                    allOrders.stream().limit(5).forEach(o ->
                            System.out.println("   - ID: " + o.getId() + ", OrderNumber: " + o.getOrderNumber())
                    );
                } catch (Exception debugEx) {
                    System.out.println("‚ö†Ô∏è Debug sorgusu ba≈üarƒ±sƒ±z: " + debugEx.getMessage());
                }

                return ResponseEntity.notFound().build();
            }

        } catch (Exception e) {
            System.out.println("üí• Sipari≈ü detayƒ± getirilirken hata: " + e.getMessage());
            log.error("Sipari≈ü detayƒ± getirme hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            e.printStackTrace();
            return ResponseEntity.internalServerError().body("Sipari≈ü detayƒ± getirilirken hata olu≈ütu");
        }
    }

    /**
     * Sipari≈ü numarasƒ±yla getir
     */
    @GetMapping("/number/{orderNumber}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<StockOrder> getOrderByNumber(@PathVariable String orderNumber) {
        log.info("Sipari≈ü detayƒ± istendi: orderNumber={}", orderNumber);

        Optional<StockOrder> order = stockOrderService.getOrderByNumber(orderNumber);
        return order.map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * Duruma g√∂re sipari≈üleri listele
     */
    @GetMapping("/status/{status}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<OrderSummaryDto>> getOrdersByStatus(@PathVariable String status) {
        System.out.println("üîç Duruma g√∂re sipari≈üler istendi: status=" + status);
        log.info("Duruma g√∂re sipari≈üler istendi: status={}", status);

        try {
            StockOrder.OrderStatus orderStatus = StockOrder.OrderStatus.valueOf(status.toUpperCase());
            List<StockOrder> orders = stockOrderService.getOrdersByStatus(orderStatus);

            System.out.println("üìä Bulunan sipari≈ü sayƒ±sƒ±: " + orders.size());

            // üöÄ FIXED: Simplified DTO to avoid JSON serialization issues
            List<OrderSummaryDto> response = orders.stream()
                    .map(this::toOrderSummaryDto)
                    .toList();

            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Ge√ßersiz sipari≈ü durumu: " + status);
            log.warn("Ge√ßersiz sipari≈ü durumu: {}", status);
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            System.out.println("üí• Sipari≈üler getirilirken hata: " + e.getMessage());
            log.error("Sipari≈üler getirme hatasƒ±: status={}, error={}", status, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * üöÄ FIXED: Bekleyen sipari≈üleri listele - Simplified JSON Response
     */
    @GetMapping("/pending")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<OrderSummaryDto>> getPendingOrders() {
        System.out.println("üîç Bekleyen sipari≈üler istendi");
        log.info("Bekleyen sipari≈üler istendi");

        try {
            List<StockOrder> orders = stockOrderService.getPendingOrders();

            System.out.println("üìä Bekleyen sipari≈ü sayƒ±sƒ±: " + orders.size());

            // üöÄ CRITICAL FIX: Convert to simplified DTOs to avoid JSON serialization issues
            List<OrderSummaryDto> response = orders.stream()
                    .map(this::toOrderSummaryDto)
                    .toList();

            // Debug: ƒ∞lk sipari≈üin detaylarƒ±nƒ± yazdƒ±r
            if (!response.isEmpty()) {
                OrderSummaryDto firstOrder = response.get(0);
                System.out.println("üì¶ ƒ∞lk sipari≈ü detaylarƒ±:");
                System.out.println("   ‚îú‚îÄ‚îÄ ID: " + firstOrder.getId());
                System.out.println("   ‚îú‚îÄ‚îÄ Order Number: " + firstOrder.getOrderNumber());
                System.out.println("   ‚îú‚îÄ‚îÄ Supplier: " + firstOrder.getSupplierName());
                System.out.println("   ‚îú‚îÄ‚îÄ Status: " + firstOrder.getStatus());
                System.out.println("   ‚îî‚îÄ‚îÄ Created By: " + firstOrder.getCreatedBy());
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.out.println("üí• Bekleyen sipari≈üler getirilirken hata: " + e.getMessage());
            log.error("Bekleyen sipari≈üler getirme hatasƒ±: {}", e.getMessage(), e);
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * üöÄ NEW: Helper method to convert StockOrder to OrderSummaryDto
     */
    private OrderSummaryDto toOrderSummaryDto(StockOrder order) {
        return OrderSummaryDto.builder()
                .id(order.getId())
                .orderNumber(order.getOrderNumber())
                .supplierName(order.getSupplierName())
                .orderDate(order.getOrderDate())
                .expectedDeliveryDate(order.getExpectedDeliveryDate())
                .status(order.getStatus().toString())
                .grandTotal(order.getGrandTotal())
                .createdBy(order.getCreatedBy())
                .build();
    }

    /**
     * Vadesi ge√ßen sipari≈üleri listele
     */
    @GetMapping("/overdue")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<OrderSummaryDto>> getOverdueOrders() {
        log.info("Vadesi ge√ßen sipari≈üler istendi");

        try {
            List<StockOrder> orders = stockOrderService.getOverdueOrders();
            List<OrderSummaryDto> response = orders.stream()
                    .map(this::toOrderSummaryDto)
                    .toList();
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("Vadesi ge√ßen sipari≈üler getirme hatasƒ±: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Tedarik√ßiye g√∂re sipari≈üleri listele
     */
    @GetMapping("/supplier/{supplierName}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<OrderSummaryDto>> getOrdersBySupplier(@PathVariable String supplierName) {
        log.info("Tedarik√ßiye g√∂re sipari≈üler istendi: supplier={}", supplierName);

        try {
            List<StockOrder> orders = stockOrderService.getOrdersBySupplier(supplierName);
            List<OrderSummaryDto> response = orders.stream()
                    .map(this::toOrderSummaryDto)
                    .toList();
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("Tedarik√ßi sipari≈üleri getirme hatasƒ±: supplier={}, error={}", supplierName, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Kullanƒ±cƒ±nƒ±n sipari≈ülerini listele
     */
    @GetMapping("/my-orders")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<OrderSummaryDto>> getMyOrders(Authentication authentication) {
        log.info("Kullanƒ±cƒ± sipari≈üleri istendi: user={}", authentication.getName());

        try {
            List<StockOrder> orders = stockOrderService.getOrdersByUser(authentication.getName());
            List<OrderSummaryDto> response = orders.stream()
                    .map(this::toOrderSummaryDto)
                    .toList();
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("Kullanƒ±cƒ± sipari≈üleri getirme hatasƒ±: user={}, error={}", authentication.getName(), e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Sipari≈ü iptal et
     */
    @PostMapping("/{orderId}/cancel")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<OrderResponseDto> cancelOrder(
            @PathVariable Long orderId,
            @RequestBody CancelOrderRequest request) {

        log.info("Sipari≈ü iptal isteƒüi: orderId={}, reason={}", orderId, request.getReason());

        try {
            StockOrder cancelledOrder = stockOrderService.cancelOrder(orderId, request.getReason());

            OrderResponseDto response = OrderResponseDto.builder()
                    .id(cancelledOrder.getId())
                    .orderNumber(cancelledOrder.getOrderNumber())
                    .status(cancelledOrder.getStatus().toString())
                    .notes(cancelledOrder.getNotes())
                    .build();

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("Sipari≈ü iptal hatasƒ±: orderId={}, error={}", orderId, e.getMessage(), e);
            return ResponseEntity.badRequest().build();
        }
    }

    // üöÄ DTO sƒ±nƒ±flarƒ± - G√ºncellenmi≈ü
    @lombok.Data
    @lombok.AllArgsConstructor
    public static class AsyncResponse {
        private String message;
        private String eventId;
    }

    @lombok.Data
    public static class ReceiptItemRequest {
        private Long orderItemId;
        private Integer receivedQuantity;
        private String notes;
    }

    @lombok.Data
    public static class CancelOrderRequest {
        private String reason;
    }

    /**
     * üöÄ NEW: OrderItem DTO - Teslimat i√ßin
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class OrderItemDto {
        private Long id;
        private Long bookId;
        private String bookTitle;
        private String bookAuthor;
        private Integer quantity;
        private BigDecimal unitPrice;
        private Integer receivedQuantity;
        private String notes;
        private BigDecimal subTotal;
    }

    /**
     * üöÄ NEW: Simplified Order Summary DTO for list endpoints
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class OrderSummaryDto {
        private Long id;
        private String orderNumber;
        private String supplierName;
        private java.time.LocalDateTime orderDate;
        private java.time.LocalDateTime expectedDeliveryDate;
        private String status;
        private java.math.BigDecimal grandTotal;
        private String createdBy;
    }

    /**
     * üöÄ NEW: Complete Order Response DTO for detail endpoint
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class OrderResponseDto {
        private Long id;
        private String orderNumber;
        private String supplierName;
        private String supplierContact;
        private java.time.LocalDateTime orderDate;
        private java.time.LocalDateTime expectedDeliveryDate;
        private java.time.LocalDateTime actualDeliveryDate;
        private String status;
        private java.math.BigDecimal totalAmount;
        private java.math.BigDecimal totalVat;
        private java.math.BigDecimal grandTotal;
        private String notes;
        private String createdBy;
        private java.time.LocalDateTime createdAt;
        private java.time.LocalDateTime updatedAt;
        private Integer orderItemsCount;
        private Boolean hasInvoice;
    }
}